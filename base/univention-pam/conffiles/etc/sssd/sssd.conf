@%@UCRWARNING=# @%@

# See
#    man sssd.conf
#    man sssd-ldap
#    man sssd-ldap-attributes
#
@!@
import os.path
from univention.lib.misc import getLDAPURIs


ca_path = '/etc/univention/ssl/ucsCA/CAcert.pem'
ciphers = configRegistry.get("ldap/tls/ciphersuite")
domainname = configRegistry.get('domainname')

print('[sssd]')
print('config_file_version = 2')
print('services = nss, pam')
print('domains = %s, nonposixldap' % domainname)
if os.path.exists('/var/www/ucsCA.crl'):
    print('certificate_verification = no_ocsp,soft_crl,crl_file=/var/www/ucsCA.crl')
else:
    print('certificate_verification = no_ocsp')
print('')

print('[nss]')
print('')

print('[pam]')
print('pam_app_services = univention-management-console')  # required to allow PAM stack UMC to access non-POSIX users/ldap accounts
print('')

print(f'''
[application/nonposixldap]
inherit_from = {domainname}
domain_type = application
ldap_user_object_class = person
''')

print('[domain/%s]' % domainname)
print('id_provider = ldap')
print('access_provider = ldap')
print('ldap_uri = %s' % getLDAPURIs(configRegistry, sep=','))
print('ldap_search_base = %s' % configRegistry['ldap/base'])
print('ldap_referrals = false')
print('cache_credentials = false')
print('case_sensitive = Preserving')

# By default nss_sss returns '*' in the pwfield.
# This leads pam_unix to return PAM_SUCCESS even for users with expired shadowLastChanged,
# because it expects 'x' to even attempt to look for shadow info.
# So we set it to 'x', so pam_unix calls the unix_chkpwd helper.
print('pwfield = x')  # careful, this is taken literally. Don't attempt to quote the 'x'.

print('ldap_default_bind_dn = %s' % configRegistry['ldap/hostdn'])
if os.path.isfile(ca_path):
    print('ldap_default_authtok_type = password')
    try:
        with open('/etc/machine.secret') as fd:
            print('ldap_default_authtok = %s' % (fd.read(),))
    except FileNotFoundError:
        pass
    print('ldap_tls_cacert = %s' % ca_path)
    print('ldap_tls_reqcert = demand')
    print('ldap_id_use_start_tls = true')
    if ciphers:
        print('ldap_tls_cipher_suite = %s' % ciphers)
if not configRegistry.is_true('nss/group/cachefile', True):
    print('ldap_schema = rfc2307bis')
    print('ldap_group_member = uniqueMember')  # see man sssd-ldap-attributes
    print('ldap_group_nesting_level = 2')      # note: this is the default, see man sssd-ldap for details
if 'krb5' not in configRegistry.get('auth/methods', '').split(' '):
    print('ldap_access_order = pwd_expire_policy_renew')
    print('ldap_pwd_policy = shadow')
@!@
