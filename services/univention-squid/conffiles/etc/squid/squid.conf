@%@UCRWARNING=#@%@

include /etc/squid/local.conf

access_log /var/log/squid/access.log
cache_log /var/log/squid/cache.log

cache_dir @%@squid/cache/format@%@ @%@squid/cache/directory@%@ @%@squid/cache/size@%@ @%@squid/cache/l1_size@%@ @%@squid/cache/l2_size@%@

acl QUERY urlpath_regex cgi-bin \?
no_cache deny QUERY

# Adapted from squeeze default configuration
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

@!@
import ipaddr
from univention.lib.misc import getLDAPURIs
from univention.config_registry.interfaces import Interfaces

def parse_network(network):
	# this will throw a ValueError if `network` is invalid
	ip = ipaddr.IPNetwork(network)
	# this seems strange, but the installed `ipaddr` version
	# does not support `ip.ip_ext`.
	return (str(ip.ip), ip.prefixlen)

# globales
myNetworks = {}
allowFrom = []
allowAll = False
authentication = False
authenticationGroups = False

# get local networks
for _name, iface in Interfaces(configRegistry).all_interfaces:
	ipv4_address = iface.ipv4_address()
	if ipv4_address:
		myNetworks[str(ipv4_address.network)] = ipv4_address.prefixlen
	ipv6_addresses = (iface.ipv6_address(name) for name in iface.ipv6_names)
	myNetworks.update({str(ip.network): ip.prefixlen for ip in ipv6_addresses if ip})
allowFrom.extend(myNetworks.items())

# get networks from ucs
for entry in configRegistry.get("squid/allowfrom", "").split(" "):
	if not entry:
		continue
	if entry == "all":
		allowAll = True
	else:
		try:
			allowFrom.append(parse_network(entry))
		except:
			print "# wrong entry in squid/allowfrom: -%s-" % entry

print "# debug options"
if configRegistry['squid/debug/level']:
	print "debug_options %s" % ( configRegistry.get('squid/debug/level'))
	print 

if configRegistry.is_false('squid/cache'):
	print "cache deny all"

if configRegistry.is_true('squid/virusscan') or configRegistry.is_true('squid/contentscan'):
	# dansguardian runs on the default port in this case
	try:
		squidport = int(configRegistry.get('squid/httpport', 3128)) + 1
		print "http_port %d" % squidport
	except:
		print "http_port 3129"
else:
	transparent = 'transparent' if configRegistry.is_true('squid/transparentproxy') else ''
	print "http_port %d %s" % ( int(configRegistry.get('squid/httpport', 3128)), transparent )

print

# authentication
if configRegistry.is_true('squid/krb5auth'):
	authentication = True
	print "# auth negotiate"
	print 'auth_param negotiate program %s' % configRegistry.get("squid/krb5auth/tool", "/usr/lib/squid/squid_ldap_ntlm_auth --gss-spnego --gss-spnego-strip-realm")
	print 'auth_param negotiate children %s' % configRegistry.get( 'squid/krb5auth/children', '10' )
	if configRegistry.is_true('squid/krb5auth/keepalive'):
		print 'auth_param negotiate keep_alive on'
	print
if configRegistry.is_true('squid/ntlmauth'):
	authentication = True
	print "# auth ntlm"
	print 'auth_param ntlm program %s -c %s' % (
		configRegistry.get('squid/ntlmauth/tool', '/usr/lib/squid/squid_ldap_ntlm_auth'),
		configRegistry.get('squid/ntlmauth/cache/timeout', '60')
	)
	print 'auth_param ntlm children %s' % configRegistry.get('squid/ntlmauth/children', '10')
	if configRegistry.is_true("squid/ntlmauth/keepalive"):
		print 'auth_param ntlm keep_alive on'
	else:
		print 'auth_param ntlm keep_alive off'
	print
if configRegistry.is_true('squid/basicauth'):
	authentication = True
	auth = [
		'/usr/lib/squid/basic_ldap_auth',
		'-b', configRegistry.get("ldap/base", ""),
		'-D', configRegistry.get("ldap/hostdn", ""),
		'-W', '/etc/squid.secret',
		'-s', 'sub',
		'-f', '"(&(objectClass=organizationalPerson)(uid=%s)(!(|(shadowExpire=1)(krb5KDCFlags=254))))"',
		'-Z',
		getLDAPURIs(configRegistry)
	]
	if configRegistry.is_true('squid/basicauth/encoding_wrapper'):
		auth[0] = '/usr/lib/squid/basic_ldap_auth_encoding_wrapper'
	print "# auth basic"
	print 'auth_param basic program %s' % (' '.join(auth),)
	print 'auth_param basic children %s' % configRegistry.get( 'squid/basicauth/children', '5' )
	print 'auth_param basic realm Univention Proxy Server'
	print 'auth_param basic credentialsttl 2 hours'
	if configRegistry.is_true('squid/basicauth/utf8'):
		print 'auth_param basic utf8 on'
	print

print "########"
print "# ACLs #"
print "########"
print
print "# default"
print "# ACLs all, manager, localhost, and to_localhost are predefined."
print "acl purge method PURGE"
print "acl CONNECT method CONNECT"
for port in configRegistry.get('squid/webports', '80 443 21').split(" "):
	print "acl web_ports port %d" % int(port)
print

if authentication:
	print "# authentication ACLs"
	if configRegistry.get("squid/auth/allowed_groups"):
		authenticationGroups = True
		ldapGroup = 'external_acl_type ldap_group %LOGIN /usr/lib/squid/ext_ldap_group_acl'
		ldapGroup += ' -h %s' % configRegistry.get("ldap/server/name", "")
		ldapGroup += ' -p %d' % int(configRegistry.get("ldap/server/port", 7389))
		ldapGroup += ' -B "%s"' % configRegistry.get("ldap/base", "")
		ldapGroup += ' -b "%s"' % configRegistry.get("ldap/base", "")
		ldapGroup += ' -D "%s"' % configRegistry.get("ldap/hostdn", "")
		if configRegistry.is_true('squid/ntlmauth'):
			ldapGroup += ' -S'
		if configRegistry.is_true('squid/krb5auth'):
			ldapGroup += ' -K'
		ldapGroup += ' -s sub'
		ldapGroup += ' -F "(uid=%s)"'
		ldapGroup += ' -W /etc/squid.secret'
		ldapGroup += ' -Z'
		ldapGroup += ' -f "(&(objectclass=univentionGroup)(uniqueMember=%u)(cn=%g))"'
		print ldapGroup
		print 'acl inetusers external ldap_group "/etc/squid/allowed_ldap_groups.conf"'
	print "acl AuthorizedUsers proxy_auth REQUIRED"
	print

print "# network ACLs"
for (count, (network, prefix)) in enumerate(allowFrom):
	print 'acl localnet%s src %s/%s' % (count, network, prefix)
print

print "#############"
print "# user ACLs #"
print "#############"
print
#'squid/acl/test/allow/browser/string': 'Referrer (Test) 3.1.2'
#'squid/acl/firefox/deny/browser/substring': 'Firefox'
#'squid/acl/something/allow/browser/regex': '^Microsoft-CryptoAPI.*$'
#'squid/acl/or other/allow/browser-i/regex': '^microsoft-cryptoapi.*$'
userrules = []
def user_acls():
	import re
	ucrv_prefix = 'squid/acl/'
	def acl_browser():
		return 'browser'
	def acl_browser_i():
		return 'browser -i'
	def acl_port():
		return 'port'
	def acl_dstdomain_regex():
		return 'dstdom_regex'
	def acl_dstdomain_regex_i():
		return 'dstdom_regex -i'
	def acl_proxy_auth_regex():
		return 'proxy_auth_regex'
	def acl_rep_mime_type():
		return 'rep_mime_type'
	def acl_rep_mime_type_i():
		return 'rep_mime_type -i'
	def acl_urlpath_regex():
		return 'urlpath_regex'
	def acl_urlpath_regex_i():
		return 'urlpath_regex -i'
	def acl_dst():
		return 'dst'
	acltypes = {
		'browser': acl_browser,
		'browser-i': acl_browser_i,
		'dstdomain': acl_dstdomain_regex,
		'dstdomain-i': acl_dstdomain_regex_i,
		'port': acl_port,
		'proxy': acl_proxy_auth_regex,
		'mime': acl_rep_mime_type,
		'mime-i': acl_rep_mime_type_i,
		'urlpath': acl_urlpath_regex,
		'urlpath-i': acl_urlpath_regex_i,
		'dst': acl_dst,
	}
	def squid_re_escape(value):
		return r'\x20'.join(map(re.escape, value.split(' ')))
	def value_string(value):
		return r'^' + squid_re_escape(value) + r'$'
	def value_substring(value):
		return r'^.*' + squid_re_escape(value) + r'.*$'
	def value_regex(value):
		try:
			re.compile(value)
		except re.error, e:
			raise ValueError('Invalid regex: %s' % (e, ))
		return r'^' + value + r'$'
	def value_port_number(value):
		value = int(value, 10)
		if not 0 <= value <= 65535:
			raise ValueError('Invalid port number %r' % (value, ))
		return '%d' % (value, )
	def value_network(value):
		return '%s' % (value, )

	valuetypes_regex = {
		'string': value_string,
		'substring': value_substring,
		'regex': value_regex,
	}
	valuetypes_port = {
		'number': value_port_number,
	}
	valuetypes_network = {
		'network': value_network,
	}
	valuetypes = {
		'browser': valuetypes_regex,
		'browser-i': valuetypes_regex,
		'dstdomain': valuetypes_regex,
		'dstdomain-i': valuetypes_regex,
		'port': valuetypes_port,
		'proxy': valuetypes_regex,
		'mime': valuetypes_regex,
		'mime-i': valuetypes_regex,
		'urlpath': valuetypes_regex,
		'urlpath-i': valuetypes_regex,
		'dst': valuetypes_network,
	}
	aclnames = set()
	for key, value, in configRegistry.items():
		if not key.startswith(ucrv_prefix):
			continue
		key = key[len(ucrv_prefix):]
		if not key.count('/') == 3:
			print '# ignored ACL %r with invalid format' % (key, )
			continue
		invalid_chars = [c for c in value if ord(c) < 32]
		if invalid_chars:
			print '# ignored ACL %r with invalid chars %r in value' % (key, invalid_chars, )
			continue
		parts = key.split('/', 4)
		name, rule, acltype, valuetype, = parts
		if rule not in ('allow', 'deny', ):
			print '# ignored ACL %r with invalid rule %r' % (key, rule, )
			continue
		if acltype not in acltypes:
			print '# ignored ACL %r with invalid ACL type %r' % (key, acltype, )
			continue
		if valuetype not in valuetypes[acltype]:
			print '# ignored ACL %r with invalid value type %r' % (key, valuetype, )
			continue
		try:
			value = valuetypes[acltype][valuetype](value)
		except ValueError, e:
			print '# ignored ACL %r with invalid value: %s' % (key, e, )
			continue
		name = 'useracl_' + ''.join([c for c in name if c.isalnum() or c == '_'])
		if name in aclnames:
			for fix in xrange(0, 100):
				newname = '%s_%d' % (name, fix, )
				if newname not in aclnames:
					name = newname
					break
			else:
				print '# ignored ACL %r with conflicting name' % (key, )
				continue
		aclnames.add(name)
		print 'acl %s %s %s' % (name, acltypes[acltype](), value, )
		userrules.append((rule, name, ))

user_acls()
print

print "#########"
print "# rules #"
print "#########"
# this must at the beginning of the "rules" section
print "include /etc/squid/local_rules.conf"
print
print "# default rules"
print
print "# Only allow cachemgr access from localhost"
print "http_access deny !web_ports"
print "http_access allow localhost manager"
print "http_access deny manager"
print "http_access allow purge localhost"
print "http_access deny purge"
print

print '# deny from user ACLs'
for rule, name, in userrules:
	if rule == 'deny':
		print "http_access %s %s" % (rule, name, )
print

print '# allow from user ACLs'
for rule, name, in userrules:
	if rule == 'allow':
		print "http_access %s %s" % (rule, name, )
print

# local nets
if configRegistry.is_true("squid/allow/localnet"):
	print "# allow local networks (squid/allow/localnet)"
	print 'http_access allow localhost'
	for (count, network) in enumerate(myNetworks.keys()):
		print 'http_access allow localnet%s' % count
	print
# user authentication or
if authentication:
	if authenticationGroups:
		print "# allow access based on ldap group membership"
		print "http_access deny !inetusers"
	print '# allow authenticated users'
	print "http_access allow CONNECT AuthorizedUsers"
	print "http_access allow AuthorizedUsers"
	print
# based on networks
else:
	print "# allow access based on networks"
	print "http_access allow localhost"
	if configRegistry.is_false('squid/virusscan', True) and configRegistry.is_false('squid/contentscan', True):
		if allowAll:
			print "http_access allow all"
		else:
			for (count, (network, prefix)) in enumerate(allowFrom):
				print 'http_access allow localnet%s' % count
	print

print "# deny the rest"
print "http_access deny all"
print "http_reply_access allow all"
print "icp_access allow all"

print
print "coredump_dir /var/spool/squid"
print

redirect = configRegistry.get("squid/redirect")
if redirect:
	if redirect == "squidguard":
		print 'url_rewrite_program /usr/bin/squidGuard -c /etc/squidguard/squidGuard.conf'
	else:
		print 'url_rewrite_program %s' % redirect
	print 'url_rewrite_children %s' % (configRegistry.get('squid/rewrite/children', 5),)

print "forwarded_for %s" % configRegistry.get("squid/forwardedfor", "off")

if configRegistry['squid/parent/host']:
	print 'cache_peer %s parent %d 0 %s' % (configRegistry['squid/parent/host'], int(configRegistry.get('squid/parent/port', 3128)), configRegistry.get('squid/parent/options', 'default'))

	print 'always_direct allow to_localhost'

	directTo = list(myNetworks.items())

	directNetworks = configRegistry.get( 'squid/parent/directnetworks', '' )

	if directNetworks != '':
		for entry in directNetworks.split(" "):
			try:
				directTo.append(parse_network(entry))
			except ValueError:
				print "# wrong entry in squid/parent/directnetworks: %s " % entry

	for (count, (network, prefix)) in enumerate(directTo):
		print 'acl to_localnet%s dst %s/%s' % (count, network, prefix)

	for rulenum in range(0, len(directTo)):
		print 'always_direct allow to_localnet%s' % rulenum

	print 'never_direct allow all'

append_domain = configRegistry.get( 'squid/append_domain', '' )
if append_domain != '':
	print 'append_domain', append_domain

@!@

# this must be the last directive
include /etc/squid/local_bottom.conf
