#!/bin/bash
#
# Univention LDAP Server
#  postinst script for the debian package
#
# Copyright 2001-2019 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

. /usr/share/univention-lib/all.sh

# check for running slapd first
if [ -n "$(pidof slapd)" ]; then
	slapd_was_running=yes
fi

# { # function definitions
stop_slapd ()
{
	if test -x /etc/init.d/slapd; then
		/etc/init.d/slapd stop
		sleep 1
	fi
}

restart_slapd ()
{
	/etc/init.d/slapd stop
	sleep 1
	if [ -n "$(pidof slapd)" ]; then
		killall slapd
		sleep 1
		if [ -n "$(pidof slapd)" ]; then
			killall -9 slapd
			sleep 1
		fi
	fi
	/etc/init.d/slapd start
}
# } # end of function definitions

# Replication: password for rootdn/updatedn and schema from master
case "$ldap_server_type" in
master) ;;
slave|*) touch /etc/ldap/rootpw.conf /var/lib/univention-ldap/schema.conf ;;
esac

#DEBHELPER#

eval "$(univention-config-registry shell)"

if [ "$server_role" = "domaincontroller_master" ]; then
	univention-config-registry set ldap/translogfile?"/var/lib/univention-ldap/listener/listener"
fi

# configure firewall
ucr set \
	security/packetfilter/package/univention-ldap-server/tcp/389/all="ACCEPT" \
	security/packetfilter/package/univention-ldap-server/tcp/389/all/en="LDAP" \
	security/packetfilter/package/univention-ldap-server/tcp/636/all="ACCEPT" \
	security/packetfilter/package/univention-ldap-server/tcp/636/all/en="LDAPS" \
	security/packetfilter/package/univention-ldap-server/tcp/7389/all="ACCEPT" \
	security/packetfilter/package/univention-ldap-server/tcp/7389/all/en="LDAP" \
	security/packetfilter/package/univention-ldap-server/tcp/7636/all="ACCEPT" \
	security/packetfilter/package/univention-ldap-server/tcp/7636/all/en="LDAPS"
[ -x "/etc/init.d/univention-firewall" ] && invoke-rc.d univention-firewall restart

if [ "$1" = configure ] && dpkg --compare-versions "$2" lt-nl 14.0.2-21; then
	find /etc/ldap/ -name 'dh_2048.pem.??????????' -type f -empty -delete
fi
[ -s /etc/ldap/dh_2048.pem ] || cp /usr/share/univention-ldap/dh_2048.pem /etc/ldap/

mdb_max=2147483648 # 2 GB
if [ "i686" = "$(uname -m)" ]; then
	mdb_max=1992294400 # 1.9 GB
fi

# set ldap/shadowbind to false for updates (4.1 -> 4.2)
if [ "$1" = configure -a -n "$2" ] && dpkg --compare-versions "$2" lt 13.0.3-5; then
	ucr set ldap/shadowbind=false
fi

ucr set \
	ldap/debug/level?none \
	slapd/port?"7389,389" \
	slapd/port/ldaps?"7636,636" \
	ldap/database/type?mdb \
	ldap/database/mdb/maxsize?"$mdb_max" \
	ldap/sizelimit?400000 \
	ldap/cachesize?20000 \
	ldap/attributeoptions?"entry-,lang-" \
	ldap/idlcachesize?20000 \
	ldap/idletimeout?360 \
	ldap/index/autorebuild?yes \
	ldap/index/quickmode?false \
	ldap/threads?16 \
	ldap/tool-threads?1 \
	ldap/acl/user/password/change?no \
	ldap/acl/slavepdc?yes \
	ldap/acl/nestedgroups?yes \
	ldap/database/bdb/db_config_options?"set_flags" \
	ldap/database/bdb/set_flags?"DB_LOG_AUTOREMOVE" \
	ldap/autostart?yes \
	ldap/tls/dh/paramfile?/etc/ldap/dh_2048.pem \
	ldap/limits?"users time.soft=-1 time.hard=-1" \
	slapd/backup/cron?"0 0 * * *" \
	slapd/backup?true \
	ldap/shadowbind?true \
	ldap/shadowbind/ignorefilter?"(|(objectClass=univentionDomainController)(userPassword={KINIT}))" \
	ldap/maxopenfiles?8192 # Bug #17705

# #18500
# Add ssl-cert group if it doesn't exist yet.
# add user openldap to the group ssl-cert
if [ -z "`getent group ssl-cert`" ]; then
	addgroup --quiet --system ssl-cert
fi
usermod -a -G ssl-cert openldap

if [ "$1" = "configure" -a -z "$2" ]; then
	# disable anonymous bind by default
	univention-config-registry set ldap/acl/read/anonymous?no
else
	univention-config-registry set ldap/acl/read/anonymous?yes
fi

eval "$(univention-config-registry shell)"

if is_ucr_true "ldap/replog" ; then
	test -f /var/lib/univention-ldap/replog/replog || \
		touch /var/lib/univention-ldap/replog/replog
	chmod 0600 /var/lib/univention-ldap/replog/replog
	test -f /var/lib/univention-ldap/replog/replog.lock || \
		touch /var/lib/univention-ldap/replog/replog.lock
fi

stop_slapd
/usr/share/univention-ldap/ldap_setup_index --add-defaults

for cfg in /var/lib/univention-ldap/ldap/DB_CONFIG /var/lib/univention-ldap/translog/DB_CONFIG
do
	[ -f "$cfg" ] || univention-config-registry commit "$cfg"
done

upgrade_license () {
	case "$server_role" in
	domaincontroller_master)
		;;
	*)
		echo "Not the DC master: skipping upgrade."
		return 0
		;;
	esac

	tmp=$(mktemp)
	trap "rm -f '$tmp'" EXIT
	dn="cn=admin,cn=license,cn=univention,$ldap_base"
	univention-ldapsearch -LLLo ldif-wrap=no -b "$dn" -s base >"$tmp" ||
		{ echo "Failed to retrieve UCS license: '$dn'"; return 1; }

	if ! grep -Fxq 'univentionLicenseBaseDN: Free for personal use edition' "$tmp"
	then
		echo "No 'Free for personal use edition' found: nothing to do."
		return 0
	elif grep -q '^univentionLicenseKeyID: ' "$tmp"
	then
		echo "Activated 'Free for personal use edition' found: see <http://sdb.univention.de/1324>."
		return 1
	else
		echo "Old 'Free for personal use edition' found: performing upgrade..."
		univention-config-registry filter </usr/share/univention-ldap/core-edition.ldif >"$tmp" &&
		univention-license-import "$tmp" ||
		echo "Failed to import new license: see <http://sdb.univention.de/1324>."
		return 1
	fi
}

if [ "$server_role" = "domaincontroller_master" ] || [ "$server_role" = "domaincontroller_backup" ]; then
	/usr/lib/univention-install/01univention-ldap-server-init.inst || true
	[ "$1" = configure ] && dpkg --compare-versions "$2" lt-nl 14.0.2-37 && /usr/share/univention-ldap/setup-translog init
	/usr/lib/univention-install/10univention-ldap-server.inst || true
	[ "$1" = configure ] && dpkg --compare-versions "$2" lt-nl 11.0.12-5 && upgrade_license || :
fi

if [ "$1" = "configure" ]; then
	if dpkg --compare-versions "$2" lt-nl 14.0.2-16; then
		if [ "$ldap_debug_level" = 0 ]; then
			ucr set ldap/debug/level=none
		fi
	fi
fi

## after this line slapd.conf is expected to be updated properly and slapd may restart

if [ "$1" = "configure" ]; then
	if [ -n "$2" ]; then	## package update
		if test -x /etc/init.d/slapd; then
			# always start on master, slapd may be down by schema-conflicts which are cleared by a new slapd.conf-template
			if [ "$server_role" = "domaincontroller_master" ]; then
				restart_slapd
			else
				#/etc/init.d/slapd crestart
				if [ -n "$slapd_was_running" ]; then
					restart_slapd
				fi
			fi
		fi
	else					## fresh installation
		if test -x /etc/init.d/slapd; then
			/etc/init.d/slapd start
		fi
	fi

	## load the listener module
	/etc/init.d/univention-directory-listener crestart

	# Bug #48530: resync listener module ldap_extension on dc backup/slave when updating from older version
	# to fix replication/activation issue in older versions of the listener module.
	if [ -n "$2" ] && dpkg --compare-versions "$2" lt 14.0.2-35; then
		if [ -e /var/univention-join/joined ] ; then
			if [ "$server_role" = "domaincontroller_backup" -o "$server_role" = "domaincontroller_slave" ] ; then
				echo "NOTICE: resyncing listener module 'ldap_extension' to replicate missing LDAP ACLs"
				/usr/sbin/jitter 15 univention-directory-listener-ctrl resync ldap_extension
			fi
		fi
	fi
fi


exit 0
